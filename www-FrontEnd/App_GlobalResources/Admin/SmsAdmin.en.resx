<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Archive_DeleteAllData" xml:space="preserve">
    <value>Delete all archive</value>
  </data>
  <data name="CurrentBalance" xml:space="preserve">
    <value>Current balance</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File not found</value>
  </data>
  <data name="FileNotSupportedFile" xml:space="preserve">
    <value>Not supported file</value>
  </data>
  <data name="FileSample" xml:space="preserve">
    <value>Sample</value>
  </data>
  <data name="Group_Name" xml:space="preserve">
    <value>Group</value>
  </data>
  <data name="ImportNumbers_Note" xml:space="preserve">
    <value>Note: Every record must be in single line without , as this sample</value>
  </data>
  <data name="ImportSms_ExcellFileValidation" xml:space="preserve">
    <value>Only excell file available</value>
  </data>
  <data name="ImportSms_File" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="ImportSms_FileValidation" xml:space="preserve">
    <value>Only text file available (.txt)</value>
  </data>
  <data name="ImportSuccessfulyCount" xml:space="preserve">
    <value>Successfuly numbers: {0}</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="MobileNumber" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="Mobile_Active" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="MsgBody" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NotImportAlradyExistCount" xml:space="preserve">
    <value>Already exist : {0}</value>
  </data>
  <data name="NotImportFailiarCount" xml:space="preserve">
    <value>Un Successfuly numbers:  {0}</value>
  </data>
  <data name="NotImportNotNumbersCount" xml:space="preserve">
    <value>Invalid numbers: {0}</value>
  </data>
  <data name="Page_AddGroup" xml:space="preserve">
    <value>Add group</value>
  </data>
  <data name="Page_AddUser" xml:space="preserve">
    <value>Add user</value>
  </data>
  <data name="Page_AllGroups" xml:space="preserve">
    <value>All groups</value>
  </data>
  <data name="Page_AllUsers" xml:space="preserve">
    <value>All users</value>
  </data>
  <data name="Page_Archive" xml:space="preserve">
    <value>Archive</value>
  </data>
  <data name="Page_ImportFromExcellFile" xml:space="preserve">
    <value>Import from excell file</value>
  </data>
  <data name="Page_ImportFromTxtFile" xml:space="preserve">
    <value>Import from text file</value>
  </data>
  <data name="Page_SendToAllSmsList" xml:space="preserve">
    <value>Send to all sms list</value>
  </data>
  <data name="Page_SendToGroup" xml:space="preserve">
    <value>Send to group</value>
  </data>
  <data name="Page_SendToUser" xml:space="preserve">
    <value>Send to user</value>
  </data>
  <data name="Result_ErrorInNumber" xml:space="preserve">
    <value>Error in number</value>
  </data>
  <data name="Result_SendingDone" xml:space="preserve">
    <value>Sending operation was done</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SmsModuleTitle" xml:space="preserve">
    <value>Sms</value>
  </data>
  <data name="SmsNoteAddingNumbers" xml:space="preserve">
    <value>Mobile numbers with countries code without 00</value>
  </data>
  <data name="SmsReciever" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="SmsSender" xml:space="preserve">
    <value>Sender</value>
  </data>
  <data name="Sms_Active" xml:space="preserve">
    <value>Activate</value>
  </data>
</root>